import tensorflow as tf
 
class CNN:
    def __init__(self,sess):
        self.sess = sess
        self.build_net()
 
    def build_net(self):
        self.X = tf.placeholder(tf.float32,[None,784])
        X_img = tf.reshape(self.X,[-1,28,28,1])
        self.Y = tf.placeholder(tf.float32,[None,10])
 
        L1 = tf.layers.conv2d(X_img, 64, [3,3], padding='SAME', activation=tf.nn.relu)
        L1 = tf.layers.max_pooling2d(L1, [2,2], [2,2],padding='SAME')
        
        L2 = tf.layers.conv2d(L1, 64, [3,3], padding='SAME', activation=tf.nn.relu)
        L2 = tf.layers.max_pooling2d(L2, [2,2], [2,2], padding='SAME')
        
        L3 = tf.layers.flatten(L2)
        self.logits = tf.layers.dense(L3,10,activation=None)
 
        self.cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=self.logits,labels=self.Y))
        self.optimizer = tf.train.AdamOptimizer(0.001).minimize(self.cost)
 
        self.predicted = tf.argmax(self.logits,1)
        is_correct = tf.equal(self.predicted, tf.argmax(self.Y,1))
        self.accuracy = tf.reduce_mean(tf.cast(is_correct,tf.float32))
 
    def train(self,x_data,y_data):
        return self.sess.run([self.cost,self.optimizer], feed_dict={self.X:x_data,self.Y:y_data})
 
    def get_accuracy(self, x_data,y_data):
        return self.sess.run(self.accuracy, feed_dict={self.X:x_data,self.Y:y_data})
 
    def prediction(self,x_data):
        return self.sesss.run(self.predicted, feed_diec={self.X:x_data})
