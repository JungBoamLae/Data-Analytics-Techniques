import cv2
import dlib
import math

#준비
predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")
detector = dlib.get_frontal_face_detector()

#검출
img = cv2.imread()
dets = detector(img, 1)

for k, d in enumerate(dets):
    shape = predictor(img, 1)
    
    #얼굴 영역 표시
    color_f = (0,0,225)
    color_l_out = (225,0,0)
    color_l_in = (0,225,0)
    line_w = 3
    circle_r = 3
    fontType = cv2.FONT_HERSHEY_SIMPLEX
    fontSize = 1
    
    cv2.rectangle(img, (d.left(), d.top()), (d.right(), d.bottom()), color_f, line_w)
    cv2.putText(img, str(k), (d.left(), d.top()), fontType, fontSize, color_f, line_w)
    
    #중심을 계산할 사각형 준비
    num_of_points_out = 17
    num_of_points_in = shape.num_parts - num_of_points_out
    gx_out = 0
    gy_out = 0
    gx_in = 0
    gy_in = 0
    for shape_point_count in range(shape.num_parts):
        shape_point = shape.part(shape_point_count)
        if shape_point_count<num_of_points_out:
            cv2.circle(img,(shape_point.x,shape_point.y),circle_r,color_l_out,line_w)
            gx_out = gx_out + shape_point.x/num_of_points_out
            gy_out = gy_out + shape_point.y/num_of_points_out
            cv2.circle(img,(shape_point.x,shape_point.y),circle_r,color_l_in,line_w)
            gx_in = gx_in + shape_point.x/num_of_points_in
            gy_in = gy_in + shape_point.y/num_of_points_in
            
        #중심위치 표시
        cv2.circle(img, int(gx_out), int(gy_out),circle_r, (0,0,225), line_w)
        cv2.circle(img, int(gx_in), int(gy_in),circle_r, (0,0,0), line_w)
    
        #얼굴 방향 표시
        theta = math.asin(2*(gx_in-gx_out)/(d.right()-d.left()))
        radian = theta*180/math.pi
        
        print("얼굴방향:{} (각도:{}도)".format(theta, radian))
        
        #얼굴방향 표시
        if radian<0:
            textPrefix = "left"
        else:
            textPrefix = "right"
            
    textShow = textPrefix + str(round(abs(radian),1)) + "deg."
    cv2.putText(img, textShow,(d.left(), d.top()), fontType, fontSize, color_f, line_w)
cv2.namedWindow("img",cv2.WINDOW_NORMAL)
cv2.inshow("img",img)
cv2.imwrite("112.jpg",img)
cv2.waitkey(0)
cv2.destroyAllWindows()
