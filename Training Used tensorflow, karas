import tensorflow as tf
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
import json

train_input, test_input, train_label, test_label = train_test_split(input_data, label_data, test_size=0.2, random_state=2019)

vocab_size = input_data.max() + 1
word_embedding_dim = 64
buffer_size = 10000
batch_size = 16

train_dataset = tf.data.dataset.from_tensor_slices((train_input, train_label))
test_dataset = tf.data.dataset.from_tensor_slices((test_input, test_label))

train_dataset = train_dataset.shuffle(BUFFER_SIZE)
train_dataset = train_dataset.batch(BATCH_SIZE)

test_dataset = test_dataset.batch(BATCH_SIZE)

model = tf.karas.Sequential([
    tf.keras.layer.enbedding(vocab_size, word_embedding_dim),
    tf.keras.layer.bidirectional(tf.keras.layer.LSTM(64, return_sequences = True)),
    tf.keras.layer.bidirectional(tf.keras.layer.LSTM(32)),
    tf.keras.layer.dense(64, activation='relu'),
    tf.keras.layer.dropout(rate=0.2),
    tf.keras.layer.dense(1, activation='sigmoid')
    ])

model.compile(loss='binary_crossentropy',
         optimizer='adam',
         metrics=['accuracy'])
    
# Modeltraining
history = model.fit(train_dataset, epochs = 10)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
